---
const { text, link, size = "medium", variant = "primary" } = Astro.props;

const sizeClasses = {
  small: "px-[80px] py-sm text-body-sm md:text-body-sm-tablet lg:text-body-sm-desktop",
  medium: "px-[80px] py-sm text-body-md md:text-body-md-tablet lg:text-body-md-desktop",
  large: "px-[80px] py-sm text-body-lg md:text-body-lg-tablet lg:text-body-lg-desktop",
};

const variantClasses = {
  primary: "bg-primary-500 text-accent-500 font-kanp font-semibold border-primary-500 hover:bg-primary-400 hover:text-white",
  secondary: "bg-accent-500 hover:bg-neutral-300 focus:bg-accent-500 focus:border-3 focus:border-accent-200 active:bg-accent-200 text-primary-500 font-kanp font-semibold",
  accent: "bg-[#FFAE29] border text-primary-500 font-kanp font-semibold border-primary-500 hover:bg-accent-800 hover:text-white hover:font-regular transition",
};

const baseClasses = "inline-block rounded-sm magnetic-btn border transition-transform ease-out duration-100 flex justify-center items-center";
---

<a href={link}
  ><button class={`${baseClasses} ${sizeClasses[size]} ${variantClasses[variant]}`}>
    {text}
  </button>
</a>

<script>
  const buttons = document.querySelectorAll(".magnetic-btn");

  // Function to calculate distance between two points
  function getDistance(x1: number, y1: number, x2: number, y2: number): number {
    return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
  }

  let mouseX = 0,
    mouseY = 0;
  let animationFrameId: number | null = null;

  // Mousemove event to track mouse position
  document.addEventListener("mousemove", (e: MouseEvent) => {
    mouseX = e.clientX;
    mouseY = e.clientY;

    // Use requestAnimationFrame for smooth updates
    if (!animationFrameId) {
      animationFrameId = requestAnimationFrame(updateButtonTransforms);
    }
  });

  // Function to update button transforms
  function updateButtonTransforms() {
    buttons.forEach((button) => {
      const buttonRect = button.getBoundingClientRect();

      // Calculate the distance between the mouse and the button
      const distance = getDistance(mouseX, mouseY, buttonRect.x + buttonRect.width / 2, buttonRect.y + buttonRect.height / 2);

      if (distance < 400) {
        const angle = Math.atan2(mouseY - (buttonRect.y + buttonRect.height / 2), mouseX - (buttonRect.x + buttonRect.width / 2));

        const distanceFactor = (400 - distance) / 400; // Normalize distance
        const moveX = Math.cos(angle) * distanceFactor * 30; // Limit move to 30px
        const moveY = Math.sin(angle) * distanceFactor * 30;

        const scale = 1 + distanceFactor * 0.2; // Scale up slightly

        (button as HTMLElement).style.transform = `translate(${moveX}px, ${moveY}px) scale(${scale})`;
      } else {
        // Reset transform
        (button as HTMLElement).style.transform = "translate(0, 0) scale(1)";
      }
    });

    animationFrameId = null; // Reset animation frame
  }
</script>
